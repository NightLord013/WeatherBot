import logging
import asyncio
import time

import aiohttp
import os
import json

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

storage = MemoryStorage()
bot = Bot(token=os.environ['BOT_TOKEN'])
dp = Dispatcher(bot, storage=storage)

logging.basicConfig(level=logging.INFO)


INTERVAL = {
    '–í —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è': 24,
    '–í —Ç–µ—á–µ–Ω–∏–∏ 2-—Ö –¥–Ω–µ–π': 24 * 2,
    '–í —Ç–µ—á–µ–Ω–∏–∏ 5-—Ç–∏ –¥–Ω–µ–π': 24 * 5,
    '–í —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏': 24 * 7,
}

FREQUENCY = {
    '–ö–∞–∂–¥—ã–π —á–∞—Å': 60 * 60,
    '–ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞': 60 * 60 * 2,
    '–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–∞': 60 * 60 * 6,
    '–ö–∞–∂–¥—ã–µ 12 —á–∞—Å–∞': 60 * 60 * 12,
    '–ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞': 60 * 60 * 24,
}

class IntervalKindChoose(StatesGroup):
    """–ì—Ä—É–ø–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    choose_interval = State()
    choose_frequency = State()


async def get_current_weather():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –ø–æ API"""
    async with aiohttp.ClientSession() as session:
        async with session.get(
                'http://api.openweathermap.org/data/2.5/weather?q=Sarmanovo&appid=82ce53fc45d23c243b0e1fc794f64432') as resp:
            response = await resp.read()
            response = json.loads(response)
            return response


async def get_weather(interval, frequency, msg=None):  # –¥–æ–±–∞–≤–∏—Ç—å during = '2 –¥–Ω—è'
    """–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã"""
    frequency = FREQUENCY[frequency]
    interval = INTERVAL[interval]
    while interval != 0:
        await asyncio.sleep(frequency)
        weather = await get_current_weather()
        await bot.send_message(msg["message"]["chat"]["id"], text=weather["weather"][0]['main'])
        interval = interval - 1
    await bot.send_message(msg["message"]["chat"]["id"], text='–ó–∞–≤–µ—Ä—à–µ–Ω–æ!')


@dp.message_handler(commands=['start'])
async def start_cmd(msg: types.Message):
    """–°–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton('–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã', callback_data='request_current_weather'),
    ]
    keyboard.add(*buttons)
    await msg.answer('–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É üòâ', reply_markup=keyboard)


@dp.message_handler(commands=['help'])
async def help_cmd(msg: types.Message):
    """–°–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã /help"""
    await msg.answer('—è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É üòâ')


@dp.callback_query_handler(text='request_current_weather')
async def set_interval(msg: types.Message, state: FSMContext):
    """–ö–æ–ª–±—ç–∫ –Ω–∞ –Ω–∞–∂–∏—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã. –ó–∞–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = []
    for interval in INTERVAL:
        buttons.append(types.KeyboardButton(text=interval))
    keyboard.add(*buttons)
    await bot.send_message(msg["message"]["chat"]["id"], text='–í —Ç–µ—á–µ–Ω–∏–∏ —Å–∫–æ–ª—å–∫–∏ –¥–Ω–µ–π –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑?',
                           reply_markup=keyboard)
    await IntervalKindChoose.choose_interval.set()


@dp.message_handler(state=IntervalKindChoose.choose_interval)
async def set_frequency(msg: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Å—Ç–æ—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.update_data(interval=msg.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = []
    for frequency in FREQUENCY:
        buttons.append(types.KeyboardButton(text=frequency))
    keyboard.add(*buttons)
    await msg.answer('–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã?', reply_markup=keyboard)
    await IntervalKindChoose.next()


@dp.message_handler(state=IntervalKindChoose.choose_frequency)
async def finish_set_up(msg: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    store = await state.get_data()
    await get_weather(interval=store['interval'], frequency=msg.text, msg=msg)


if __name__ == '__main__':
    executor.start_polling(dp)
